
Buat Bot untuk melakukan **scraping data** terhadap user Telegram, terutama di lingkungan grup/channel, dan menyimpan riwayat perubahan identitas serta keanggotaan grup ke dalam file JSON.

### 1. ⚙️ Arsitektur & Persistensi Data

* **Pustaka Utama:** `telethon` (untuk berinteraksi sebagai User Client).
* **Konfigurasi:** Menggunakan file `.env` untuk menyimpan `TG_API_ID`, `TG_API_HASH`, dan `ADMIN_IDS`.
* **Penyimpanan Lokal (`LocalDataStore`):**
    * Data user (`user_data.json`) dan status pemindaian (`scan_status.json`) disimpan di disk.
    * Menggunakan *cache* di memori dan *ThreadPoolExecutor* untuk I/O file secara *asynchronous* (*scheduled_save_to_disk*).
* **Anti-Redundansi:** Logika di `save_user_data` dirancang untuk **tidak membuat entri riwayat baru** kecuali terjadi perubahan identitas (`full_name` atau `username`) atau penambahan grup aktif/bersama yang signifikan.

### 2. 👥 Pelacakan User dan Riwayat (`/hisz`)

* **`save_user_data(user_entity, extra_data)`:** Fungsi inti untuk menyimpan riwayat user.
    * **Merge:** Jika hanya ada penambahan grup aktif, fungsi ini akan *menggabungkan* data ke entri riwayat terakhir, bukan membuat entri baru (meminimalkan ukuran data).
    * **Snapshot Grup:** Mencatat grup tempat user mengirim pesan (`active_chats_snapshot`).
* **`show_history(client, admin_id, user_id_to_check)` (`/hisz`)**:
    * Mengambil data riwayat dari cache.
    * Membandingkan data yang tersimpan dengan **status *live* Telegram** untuk mendeteksi data yang "stale" (belum tersimpan).
    * Mendukung **Reverse Lookup** (mencari user ID mana saja yang memiliki ID Grup tertentu dalam riwayat mereka).

### 3. 🔍 Pemindaian Grup (`/scan_group`, `/scan_user`)

* **Pemindaian Grup Cepat (`/scan_group`):**
    * Menggunakan **Metode Iterasi Alfabetis** (`client.iter_participants` dengan `search=filter`) sebagai *workaround* untuk batas API 10.000 user.
    * **Checkpoint:** Menyimpan kemajuan pemindaian (`filter_index` dan `total_processed_since_start`) ke `scan_status.json` sehingga dapat dilanjutkan setelah *disconnect* atau *FloodWaitError*.
    * Mencatat grup yang dipindai ke *snapshot* `active_chats_snapshot` setiap user.
* **Pemindaian User Detail (`/scan_user`):**
    * Melakukan panggilan API mahal (`client.get_common_chats`) untuk mendapatkan daftar **semua grup bersama** antara bot dan user target.
    * Mencatat hasilnya ke `shared_chats` di riwayat user.
* **Administrasi Scan (`/clear_checkpoint`):** Menghapus status kemajuan pemindaian grup tertentu.

note penting
- Buat struktur datanya sama dari file user_data yang sudah ada sehingga tidak tumpang tidih dan merusak data yang sudah ada
- Fungsi /hisz tampilan ouputnya perubahan (username dan nama) menggunakan blok <pre> atau <code> di Telegram dan dibuat dengan sesimpel dan serapi mungkin enak untuk dilihat.
- Fungsi /scan_group tampilan ouputnya edit pesan yang sudah ada saja jangan mengirim berulang yang mengakibatkan di baned telegram dan berikan jeda berkala, menggunakan blok <pre> atau <code> di Telegram dan dibuat dengan sesimpel dan serapi mungkin enak untuk dilihat.
- Buat bot mencatat data user secara pasif saat user yang melakukan chat ke grup, Tapi hanya grup yang sudah pernah discan dan selesai proses scannya
- Buat semua fungsi mengeluarkan ouput terminal disertai keterangan fungsi yang sedang jalan biar saya tau bot jalan atau tidak
- Perintah /hisz dilakukan dengan id tele
- Saat printah /hisz ambil data dari database cocokan dengan data baru dari tele jika ada perubahan data baru simpan kedatabase
- Pencatatan data grup sertakan nama grup
- Jika username sudah ada brubah jadi null abaikan saja proses penyimpanan karena sering tidak mendapatkan username dari proses scraping
- Perintah /scan_group dan /scan_allgroup pastikan bisa menerima ID grup sebagai argumen dan data yang disimpan sama berupa string dengan awalan -100
- Tampilkan di terminal berapa jumlah user yang disimpan di database
- Fungsi /scan_user <user_id> jika tidak ditemukan ambil dan cocokkan dengan data yang ada di database pastikan penyimpanan data tidak redudan dengan menggunakan fungsi inti save user data
- Buatkan fungsi /scan_allgrup biar tidak scan grup satu persatu
- Implementasikan sistem batch processing ini ke dalam fungsi scan_group
- Metode scan group menjadi scan group biasa jika member grup kurang dari 10000
- Konekan dengan database mongodb atlas
- buat fungsi untuk mengambil data user secara otomatis dari chat user ke grup yang sama dengan user yang dipakai untuk bot. catatan: fungsi ini berjalan bedasarkan list grup id yang sudah berhasil di scan dari scan grup (pastikan data id tele int bukan string sehingga tidak ada miss dalam pencocokan if)
- buat fungsi untuk menampilkan grup yang sudah di scan dan yang belum pernah di scan
- buat fungsi menambah grup secara manual untuk masuk daftar list pasif detection bot
- buat /scan_allgroup biar tidak scan grup satu satu
- saat /scan_group dan /scan_allgroup fungsi penambahan nama grup yang discan ke active_chats_snapshot
- Konsistensi data user id, chat id dan grup id gunakan string. biar tidak salah dalam menampilkan laporan
- proses penyimpanan data dibuat batch jangan disimpan satu satu tunggu sampai data terkumpul 300 data baru di simpan ke database
- Scan Aktif (/scan_group, /scan_allgrup): Menggunakan batch processing untuk kecepatan saat menangani ribuan pengguna.
- Scan Pasif (Pesan masuk): Menggunakan penyimpanan individual untuk merespons peristiwa secara real-time dengan efisien.
- Hanya Admin yang bisa memberikan perintah perintah yang ada di bot jika ada user lain yang menjalan perintah abakan jangan ada balasan atau reaksi apapun
- perintah /help dan ketika hasil tampilan dari perintah help di klik misal klik /scan_group maka langsung jalan perintah tersebut dan langsung meminta id grup
- buat fungsi scan_allgrup ke 2 yang fungsinya sama dengan scan_all grup tapi ini hanya menscan grup yang belum pernah discan sama sekali, gunakan fungsi yang sama pada scan grup pertama biar tidak terlalu banyak fungsi yang tidak perlu atau doble fungsi tinggal tambahkan saja fungsi logika yang kurang
- buat chat private ikut scan pasif tapi metode white list grup masih berlaku
- Solving race condition $addToSet mengunakan logika update menjadi operasi atomik, di mana dua proses bot yang berjalan bersamaan mencoba mengubah data yang sama pada saat yang sama, yang bisa menyebabkan salah satu perubahan hilang atau data menjadi rusak.
- Pengguna tidak memiliki username publik (@username), buat profil mereka menggunakan ID pengguna internal. Formatnya adalah tg://user?id=<user_id>
- atisipasi perbaiki terkena limit pesan melebihi batas max pesan yang akan dikirim





